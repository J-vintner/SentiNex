import socket
import pandas as pd
import matplotlib.pyplot as plt
import csv
import os

# -----------------------------
# Capture Packets Function
# -----------------------------

def capture_packets(packet_count=10, output_file='packet_log.csv'):
    """
    Captures a specified number of IPv4 packets using raw sockets, extracts source and destination IPs,
    and saves them to a CSV file.

    Parameters:
    - packet_count (int): Number of packets to capture.
    - output_file (str): File path where captured data will be saved as CSV.

    Returns:
    - None
    """
    try:
        # Create a raw socket for IPv4 traffic
        sock = socket.socket(socket.AF_INET, socket.SOCK_RAW, socket.IPPROTO_IP)
        sock.bind(("0.0.0.0", 0))  # Bind to all interfaces

        # Include IP headers in captured data
        sock.setsockopt(socket.IPPROTO_IP, socket.IP_HDRINCL, 1)

        # Enable promiscuous mode on Windows (optional on Unix)
        try:
            sock.ioctl(socket.SIO_RCVALL, socket.RCVALL_ON)
        except AttributeError:
            pass  # Skip if not supported (non-Windows)

        captured_data = []
        print(f"Capturing {packet_count} packets...")

        for _ in range(packet_count):
            packet = sock.recvfrom(65565)
            packet_data = packet[0]

            # Extract source and destination IPs from the packet bytes
            source_ip = '.'.join(map(str, packet_data[12:16]))
            destination_ip = '.'.join(map(str, packet_data[16:20]))

            captured_data.append([source_ip, destination_ip])

        # Save to CSV
        with open(output_file, mode='w', newline='') as file:
            writer = csv.writer(file)
            writer.writerow(['Source IP', 'Destination IP'])
            writer.writerows(captured_data)

        print(f"\nPacket capture completed. Data saved to {output_file}.")

        # Disable promiscuous mode (Windows)
        try:
            sock.ioctl(socket.SIO_RCVALL, socket.RCVALL_OFF)
        except AttributeError:
            pass

        sock.close()

    except PermissionError:
        print("Permission denied: Please run the script as Administrator.")

# -----------------------------
# Display Data Function
# -----------------------------

def display_data(file_path='packet_log.csv'):
    """
    Reads and displays the contents of the packet log CSV.

    Parameters:
    - file_path (str): Path to the CSV file containing packet logs.

    Returns:
    - None
    """
    if not os.path.exists(file_path):
        print("No packet data found. Please capture packets first.")
        return

    data = pd.read_csv(file_path)
    print("\n--- Packet Data ---")
    print(data)

# -----------------------------
# Visualize Data Function
# -----------------------------

def visualize_data(file_path='packet_log.csv'):
    """
    Creates a bar chart showing the number of packets captured from each source IP address.

    Parameters:
    - file_path (str): Path to the CSV file containing packet logs.

    Returns:
    - None
    """
    if not os.path.exists(file_path):
        print("No packet data found. Please capture packets first.")
        return

    data = pd.read_csv(file_path)
    ip_counts = data['Source IP'].value_counts()

    plt.figure(figsize=(10, 6))
    ip_counts.plot(kind='bar')
    plt.title('Packet Source IP Distribution')
    plt.xlabel('Source IP Address')
    plt.ylabel('Number of Packets')
    plt.tight_layout()
    plt.show()

# -----------------------------
# Main CLI Loop
# -----------------------------

def main():
    """
    Runs the command-line interface for SentiNex, allowing users to:
    1. Capture network packets
    2. View captured data
    3. Visualize packet source IPs
    4. Exit the tool

    Returns:
    - None
    """
    while True:
        print("\n--- SentiNex: Network Monitoring Tool ---")
        print("1. Capture Packets")
        print("2. Display Captured Data")
        print("3. Visualize Packet Distribution")
        print("4. Exit")

        choice = input("Enter your choice: ")

        if choice == '1':
            try:
                packet_count = int(input("Enter number of packets to capture: "))
                capture_packets(packet_count)
            except ValueError:
                print("Invalid input. Please enter a number.")

        elif choice == '2':
            display_data()

        elif choice == '3':
            visualize_data()

        elif choice == '4':
            print("Exiting the tool. Goodbye!")
            break

        else:
            print("Invalid choice. Please try again.")

# -----------------------------
# Entry Point
# -----------------------------

if __name__ == "__main__":
    main()
